<?php declare(strict_types=1);
/**
 * ProcessEight
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for your
 * needs please contact ProcessEight for more information.
 *
 * @category    watson-safari
 * @package     code-coverage-to-html.php
 * @copyright   Copyright (c) 2019 ProcessEight
 * @author      ProcessEight
 *
 */

/**
 * @see https://derickrethans.nl/path-branch-coverage.html
 */
/*
 * Based on:
   +----------------------------------------------------------------------+
   | Xdebug                                                               |
   +----------------------------------------------------------------------+
   | Copyright (c) 2002-2018 Derick Rethans                               |
   +----------------------------------------------------------------------+
   | This source file is subject to version 1.01 of the Xdebug license,   |
   | that is bundled with this package in the file LICENSE, and is        |
   | available at through the world-wide-web at                           |
   | https://xdebug.org/license.php                                       |
   | If you did not receive a copy of the Xdebug license and are unable   |
   | to obtain it through the world-wide-web, please send a note to       |
   | derick@xdebug.org so we can mail you a copy immediately.             |
   +----------------------------------------------------------------------+
   | Authors: Derick Rethans <derick@xdebug.org>                          |
   +----------------------------------------------------------------------+
 */

/**
 * Convert code coverage data generated by xdebug_get_code_coverage() into a DOT graph
 *
 * @param array[] $info
 *
 * @return string
 */
function code_coverage_to_dot(array $info)
{
    $output = "digraph {\n";

    ksort($info);
    foreach ($info as $filename => $file) {
        // Don't output any data relating to the files which contain the Xdebug code coverage start/end logic
        if (preg_match('/dump-branch-coverage.inc$/', $filename)) {
            continue;
        }
        if (preg_match('/branch-coverage-to-dot.php$/', $filename)) {
            continue;
        }
        if (!isset($file['functions'])) {
            continue;
        }

        $output .= sprintf("subgraph cluster_file_%s {\nlabel=\"%s\";\n", md5($filename), $filename);

        ksort($file['functions']);
        foreach ($file['functions'] as $functionName => $function) {
            $output .= sprintf(
                "subgraph cluster_%s {\n\tlabel=\"%s\";\n\tgraph [rankdir=\"LR\"];\n\tnode [shape = record];\n",
                md5($functionName),
                $functionName
            );
            foreach ($function['branches'] as $branchIndex => $branch) {
                // If this 'branch' (block of executable code) was not executed, we don't want to know about it
                if ($branch['hit'] === 0) {
                    continue;
                }
                $output .= sprintf("\t\"__%s_%d\" [ label = \"{ line %d-%d }\" ];\n",
                    $functionName, $branchIndex,
                    $branch['line_start'], $branch['line_end']
                );
            }
            $output .= sprintf("\t\"__%s_ENTRY\" [label=\"ENTER\"];", $functionName);
            $output .= sprintf("\t\"__%s_EXIT\" [label=\"EXIT\"];", $functionName);
            foreach ($function['paths'] as $path) {
                if ($path['hit'] === 0) {
                    // If this 'branch' (block of executable code) was not executed, we don't want to know about it
                    continue;
                }
                $output .= sprintf(
                    "\t\"__%s_ENTRY\" -> \"__%s_%d\"",
                    $functionName,
                    $functionName,
                    $path['path'][0]
                );
                for ($i = 1; $i < sizeof($path['path']); $i++) {
                    $output .= sprintf(
                        " -> \"__%s_%d\"",
                        $functionName,
                        $path['path'][$i]
                    );
                }
                $lastOp = $path['path'][sizeof($path['path']) - 1];

                if (isset($function['branches'][$lastOp]['out'][0]) && $function['branches'][$lastOp]['out'][0] == 2147483645) {
                    $output .= sprintf(" -> \"__%s_EXIT\"", $functionName);
                }
                if (isset($function['branches'][$lastOp]['out'][1]) && $function['branches'][$lastOp]['out'][1] == 2147483645) {
                    $output .= sprintf(" -> \"__%s_EXIT\"", $functionName);
                }
                // Determines the colour of the connecting arrows
                $output .= " [color=\"/set19/2\" penwidth=3];\n";
            }

            $output .= "}\n";
        }

        $output .= "}\n";
    }

    $output .= "}\n";

    return $output;
}
